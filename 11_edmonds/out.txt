Chosen root 0
Starting Edmonson algorithm.
>> Outer iteration 0 with the following state: 
		 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 3, 5.0), (3, 9, 2.0), (3, 4, 1.0), (4, 5, 4.0), (5, 3, 3.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
		 new nodes   W= [0]
		 new edges   F= []
		 all_covered_nodes: set()
BFS numbers: [0, 1, 4, 6, 8, 9, 3, 2, 5, 7, 10, 11, 12]
Node with max number is node 12
Initializing path to empty
	 ** Inner iteration 0 started with the following state:
			 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 3, 5.0), (3, 9, 2.0), (3, 4, 1.0), (4, 5, 4.0), (5, 3, 3.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
			 new nodes   W= [0]
			 new edges   F= []
			 all_covered_nodes: set()
			 X = 12
			 current_path_nodes Vp= []
			 current_path_edges Ep= []
		Minimum input edge into node x=12 is edge (11, 12, 1.0)
		This edge starts in node 11 which is not in Vp U W, therefore we put it as x and continue finding path.
	 ** Inner iteration 1 started with the following state:
			 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 3, 5.0), (3, 9, 2.0), (3, 4, 1.0), (4, 5, 4.0), (5, 3, 3.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
			 new nodes   W= [0]
			 new edges   F= []
			 all_covered_nodes: set()
			 X = 11
			 current_path_nodes Vp= [12]
			 current_path_edges Ep= [(11, 12, 1.0)]
		Minimum input edge into node x=11 is edge (10, 11, 1.0)
		This edge starts in node 10 which is not in Vp U W, therefore we put it as x and continue finding path.
	 ** Inner iteration 2 started with the following state:
			 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 3, 5.0), (3, 9, 2.0), (3, 4, 1.0), (4, 5, 4.0), (5, 3, 3.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
			 new nodes   W= [0]
			 new edges   F= []
			 all_covered_nodes: set()
			 X = 10
			 current_path_nodes Vp= [12, 11]
			 current_path_edges Ep= [(11, 12, 1.0), (10, 11, 1.0)]
		Minimum input edge into node x=10 is edge (5, 10, 1.0)
		This edge starts in node 5 which is not in Vp U W, therefore we put it as x and continue finding path.
	 ** Inner iteration 3 started with the following state:
			 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 3, 5.0), (3, 9, 2.0), (3, 4, 1.0), (4, 5, 4.0), (5, 3, 3.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
			 new nodes   W= [0]
			 new edges   F= []
			 all_covered_nodes: set()
			 X = 5
			 current_path_nodes Vp= [12, 11, 10]
			 current_path_edges Ep= [(11, 12, 1.0), (10, 11, 1.0), (5, 10, 1.0)]
		Minimum input edge into node x=5 is edge (4, 5, 4.0)
		This edge starts in node 4 which is not in Vp U W, therefore we put it as x and continue finding path.
	 ** Inner iteration 4 started with the following state:
			 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 3, 5.0), (3, 9, 2.0), (3, 4, 1.0), (4, 5, 4.0), (5, 3, 3.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
			 new nodes   W= [0]
			 new edges   F= []
			 all_covered_nodes: set()
			 X = 4
			 current_path_nodes Vp= [12, 11, 10, 5]
			 current_path_edges Ep= [(11, 12, 1.0), (10, 11, 1.0), (5, 10, 1.0), (4, 5, 4.0)]
		Minimum input edge into node x=4 is edge (3, 4, 1.0)
		This edge starts in node 3 which is not in Vp U W, therefore we put it as x and continue finding path.
	 ** Inner iteration 5 started with the following state:
			 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 3, 5.0), (3, 9, 2.0), (3, 4, 1.0), (4, 5, 4.0), (5, 3, 3.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
			 new nodes   W= [0]
			 new edges   F= []
			 all_covered_nodes: set()
			 X = 3
			 current_path_nodes Vp= [12, 11, 10, 5, 4]
			 current_path_edges Ep= [(11, 12, 1.0), (10, 11, 1.0), (5, 10, 1.0), (4, 5, 4.0), (3, 4, 1.0)]
		Minimum input edge into node x=3 is edge (5, 3, 3.0)
		This edge starts in node 5 which is already in our current path, therefore we've got a cycle!.
			 The cycle consist of the nodes [5, 4, 3]
			 The cycle consist of the edges [(5, 10, 1.0), (4, 5, 4.0), (3, 4, 1.0), (5, 3, 3.0)]
			 We introduce 5 as super node that covers nodes [4, 3]
			 We remove all covered nodes from current Vp getting [12, 11, 10, 5]
			 We now need to update path edges that are currently: [(11, 12, 1.0), (10, 11, 1.0), (5, 10, 1.0), (4, 5, 4.0), (3, 4, 1.0), (5, 3, 3.0)]
			 After update we have Ep=[(11, 12, 1.0), (10, 11, 1.0), (5, 10, 1.0)]
			 We now need to update global edges: [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 3, 5.0), (3, 9, 2.0), (3, 4, 1.0), (4, 5, 4.0), (5, 3, 3.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
			 After update we have E=[(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
	 ** Inner iteration 6 started with the following state:
			 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
			 new nodes   W= [0]
			 new edges   F= []
			 all_covered_nodes: {3, 4}
			 X = 5
			 current_path_nodes Vp= [12, 11, 10, 5]
			 current_path_edges Ep= [(11, 12, 1.0), (10, 11, 1.0), (5, 10, 1.0)]
		Minimum input edge into node x=5 is edge (2, 5, 2.0)
		This edge starts in node 2 which is not in Vp U W, therefore we put it as x and continue finding path.
	 ** Inner iteration 7 started with the following state:
			 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
			 new nodes   W= [0]
			 new edges   F= []
			 all_covered_nodes: {3, 4}
			 X = 2
			 current_path_nodes Vp= [12, 11, 10, 5, 5]
			 current_path_edges Ep= [(11, 12, 1.0), (10, 11, 1.0), (5, 10, 1.0), (2, 5, 2.0)]
		Minimum input edge into node x=2 is edge (1, 2, 2.0)
		This edge starts in node 1 which is not in Vp U W, therefore we put it as x and continue finding path.
	 ** Inner iteration 8 started with the following state:
			 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
			 new nodes   W= [0]
			 new edges   F= []
			 all_covered_nodes: {3, 4}
			 X = 1
			 current_path_nodes Vp= [12, 11, 10, 5, 5, 2]
			 current_path_edges Ep= [(11, 12, 1.0), (10, 11, 1.0), (5, 10, 1.0), (2, 5, 2.0), (1, 2, 2.0)]
		Minimum input edge into node x=1 is edge (0, 1, 2.0)
		This edge starts in node 0 which is in W (already added to tree). In this case we're done with inner iterations
		We flush the path nodes Vp into W and path edges Ep into F and also add edge (0, 1, 2.0)
		And we go all the way back to outer iterations.
>> Outer iteration 1 with the following state: 
		 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
		 new nodes   W= [0, 1, 2, 5, 10, 11, 12]
		 new edges   F= [(2, 5, 2.0), (1, 2, 2.0), (10, 11, 1.0), (0, 1, 2.0), (5, 10, 1.0), (11, 12, 1.0)]
		 all_covered_nodes: {3, 4}
BFS numbers: [0, 1, 4, 6, 8, 9, 3, 2, 5, 7, 10, 11, 12]
Node with max number is node 9
Initializing path to empty
	 ** Inner iteration 0 started with the following state:
			 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
			 new nodes   W= [0, 1, 2, 5, 10, 11, 12]
			 new edges   F= [(2, 5, 2.0), (1, 2, 2.0), (10, 11, 1.0), (0, 1, 2.0), (5, 10, 1.0), (11, 12, 1.0)]
			 all_covered_nodes: {3, 4}
			 X = 9
			 current_path_nodes Vp= []
			 current_path_edges Ep= []
		Minimum input edge into node x=9 is edge (5, 9, 2.0)
		This edge starts in node 5 which is in W (already added to tree). In this case we're done with inner iterations
		We flush the path nodes Vp into W and path edges Ep into F and also add edge (5, 9, 2.0)
		And we go all the way back to outer iterations.
>> Outer iteration 2 with the following state: 
		 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
		 new nodes   W= [0, 1, 2, 5, 9, 10, 11, 12]
		 new edges   F= [(2, 5, 2.0), (1, 2, 2.0), (5, 9, 2.0), (10, 11, 1.0), (0, 1, 2.0), (5, 10, 1.0), (11, 12, 1.0)]
		 all_covered_nodes: {3, 4}
BFS numbers: [0, 1, 4, 6, 8, 9, 3, 2, 5, 7, 10, 11, 12]
Node with max number is node 8
Initializing path to empty
	 ** Inner iteration 0 started with the following state:
			 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
			 new nodes   W= [0, 1, 2, 5, 9, 10, 11, 12]
			 new edges   F= [(2, 5, 2.0), (1, 2, 2.0), (5, 9, 2.0), (10, 11, 1.0), (0, 1, 2.0), (5, 10, 1.0), (11, 12, 1.0)]
			 all_covered_nodes: {3, 4}
			 X = 8
			 current_path_nodes Vp= []
			 current_path_edges Ep= []
		Minimum input edge into node x=8 is edge (7, 8, 3.0)
		This edge starts in node 7 which is not in Vp U W, therefore we put it as x and continue finding path.
	 ** Inner iteration 1 started with the following state:
			 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
			 new nodes   W= [0, 1, 2, 5, 9, 10, 11, 12]
			 new edges   F= [(2, 5, 2.0), (1, 2, 2.0), (5, 9, 2.0), (10, 11, 1.0), (0, 1, 2.0), (5, 10, 1.0), (11, 12, 1.0)]
			 all_covered_nodes: {3, 4}
			 X = 7
			 current_path_nodes Vp= [8]
			 current_path_edges Ep= [(7, 8, 3.0)]
		Minimum input edge into node x=7 is edge (0, 7, 5.0)
		This edge starts in node 0 which is in W (already added to tree). In this case we're done with inner iterations
		We flush the path nodes Vp into W and path edges Ep into F and also add edge (0, 7, 5.0)
		And we go all the way back to outer iterations.
>> Outer iteration 3 with the following state: 
		 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
		 new nodes   W= [0, 1, 2, 5, 7, 8, 9, 10, 11, 12]
		 new edges   F= [(2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (11, 12, 1.0), (1, 2, 2.0), (10, 11, 1.0), (0, 7, 5.0), (0, 1, 2.0), (7, 8, 3.0)]
		 all_covered_nodes: {3, 4}
BFS numbers: [0, 1, 4, 6, 8, 9, 3, 2, 5, 7, 10, 11, 12]
Node with max number is node 6
Initializing path to empty
	 ** Inner iteration 0 started with the following state:
			 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
			 new nodes   W= [0, 1, 2, 5, 7, 8, 9, 10, 11, 12]
			 new edges   F= [(2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (11, 12, 1.0), (1, 2, 2.0), (10, 11, 1.0), (0, 7, 5.0), (0, 1, 2.0), (7, 8, 3.0)]
			 all_covered_nodes: {3, 4}
			 X = 6
			 current_path_nodes Vp= []
			 current_path_edges Ep= []
		Minimum input edge into node x=6 is edge (0, 6, 1.0)
		This edge starts in node 0 which is in W (already added to tree). In this case we're done with inner iterations
		We flush the path nodes Vp into W and path edges Ep into F and also add edge (0, 6, 1.0)
		And we go all the way back to outer iterations.
>> Outer iteration 4 with the following state: 
		 graph edges E= [(0, 1, 2.0), (0, 7, 5.0), (0, 6, 1.0), (1, 2, 2.0), (1, 2, 3.0), (2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (7, 8, 3.0), (8, 0, 2.0), (9, 6, 3.0), (10, 11, 1.0), (10, 10, 1.0), (11, 12, 1.0)]
		 new nodes   W= [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12]
		 new edges   F= [(2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (0, 6, 1.0), (11, 12, 1.0), (1, 2, 2.0), (10, 11, 1.0), (0, 7, 5.0), (0, 1, 2.0), (7, 8, 3.0)]
		 all_covered_nodes: {3, 4}
=====================================================================================================
Main algorithm finished.
W = [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12]
F = [(2, 5, 2.0), (5, 9, 2.0), (5, 10, 1.0), (0, 6, 1.0), (11, 12, 1.0), (1, 2, 2.0), (10, 11, 1.0), (0, 7, 5.0), (0, 1, 2.0), (7, 8, 3.0)]
all_covered_nodes =
{3, 4}
Starting supernode expansion
	Expanding supernode 5
Adding inc (2, 3, 5.0)
Adding outg (5, 10, 1.0)
Adding outg (3, 9, 2.0)
Finally, all active edges are: [(0, 1, 2.0), (0, 6, 1.0), (0, 7, 5.0), (1, 2, 2.0), (2, 3, 5.0), (3, 4, 1.0), (3, 9, 2.0), (4, 5, 4.0), (5, 10, 1.0), (7, 8, 3.0), (10, 11, 1.0), (11, 12, 1.0)]
